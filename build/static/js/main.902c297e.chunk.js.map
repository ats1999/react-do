{"version":3,"sources":["toolbarItems.js","widgetRules.js","App.js","reportWebVitals.js","index.js"],"names":["items","toggleFullScreen","editorRef","button","document","createElement","className","style","backgroundImage","margin","innerHTML","addEventListener","_","current","el","getRootElement","height","previewStyleButton","handleClick","darkMode","reWidgetRule","rules","rule","toDOM","text","matched","match","span","umlOptions","rendererURL","App","useRef","useState","previewStyle","setPreviewStyle","theme","previewStyleTab","ref","initialValue","initialEditType","useCommandShortcut","widgetRules","toolbarItems","tooltip","getElementsByClassName","classList","contains","remove","add","customHTMLRenderer","latex","node","console","log","btex","plugins","uml","colorSyntax","chart","tableMergedCell","codeSyntaxHighlight","highlighter","Prism","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.902c297e.chunk.js","sourcesContent":["// import { toggleFullScreen,previewStyleButton } from \"./customButtons\";\n\nexport const items = [\n    ['heading', 'bold', 'italic', 'strike'],\n    ['hr', 'quote'],\n    ['ul', 'ol', 'task', 'indent', 'outdent'],\n    ['table', 'image', 'link'],\n    ['code', 'codeblock']\n]\n\n\nexport function toggleFullScreen(editorRef) {\n    const imageUrl = \"https://res.cloudinary.com/dsabyte/image/upload/v1625072659/toast/fullscreen-svgrepo-com_y4avfz.svg\";\n\n    const button = document.createElement('button');\n    button.className = `toastui-editor-toolbar-icons ${'full-screen'}`;\n    button.style.backgroundImage = 'none';\n    button.style.margin = '0';\n    button.innerHTML = `<img src=${imageUrl} alt='full screen  button'></img>`;\n\n    button.addEventListener('click', (_) => {\n        if (!editorRef || !editorRef.current)\n            return;\n\n        const el = editorRef.current.getRootElement();\n\n        if (el.style.height != \"100vh\")\n            el.style = \"height:100vh; width:100vw; position:fixed;z-index:100000;top:0px;left:0px;background-color:white;\";\n        else el.style = \"height:400px;\"\n    });\n\n    return button;\n}\n\nexport function previewStyleButton(handleClick) {\n    const imageUrl = \"https://res.cloudinary.com/dsabyte/image/upload/v1625105428/toast/preview-style_vevyy6.svg\";\n\n    const button = document.createElement('button');\n    button.className = `toastui-editor-toolbar-icons ${'preview-style-button'}`;\n    button.style.backgroundImage = 'none';\n    button.style.margin = '0';\n    button.innerHTML = `<img src=${imageUrl} alt='preview-style-button'></img>`;\n\n    button.addEventListener('click',handleClick);\n\n    return button;\n}\n\nexport function darkMode(handleClick) {\n    const imageUrl = \"https://res.cloudinary.com/dsabyte/image/upload/v1625109031/toast/moon-svgrepo-com_xmuyw5.svg\";\n\n    const button = document.createElement('button');\n    button.className = `toastui-editor-toolbar-icons ${'dark-mode-button'}`;\n    button.style.backgroundImage = 'none';\n    button.style.margin = '0';\n    button.innerHTML = `<img src=${imageUrl} alt='dark-mode-button'></img>`;\n\n    button.addEventListener('click',handleClick);\n\n    return button;\n}","const reWidgetRule = /\\[(@\\S+)\\]\\((\\S+)\\)/;\nconst rules = [\n    {\n        // [@go](link)\n        rule: reWidgetRule,\n        toDOM(text) {\n            const rule = reWidgetRule;\n            const matched = text.match(rule);\n            const span = document.createElement('span');\n\n            span.innerHTML = `<a class=\"widget-anchor\" href=\"${matched[2]}\">${matched[1]}</a>`;\n            return span;\n        },\n    },\n]\n\nexport default rules;","import { useRef, useState } from \"react\";\n// core\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport \"@toast-ui/editor/dist/theme/toastui-editor-dark.css\";\n// import 'codemirror/lib/codemirror.css';\nimport { Editor } from \"@toast-ui/react-editor\";\nimport uml from \"@toast-ui/editor-plugin-uml\";\n\nimport \"tui-color-picker/dist/tui-color-picker.css\";\nimport \"@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css\";\nimport colorSyntax from \"@toast-ui/editor-plugin-color-syntax\";\n\nimport \"@toast-ui/chart/dist/toastui-chart.css\";\nimport chart from \"@toast-ui/editor-plugin-chart\";\n\nimport \"@toast-ui/editor-plugin-table-merged-cell/dist/toastui-editor-plugin-table-merged-cell.css\";\nimport tableMergedCell from \"@toast-ui/editor-plugin-table-merged-cell\";\n\nimport Prism from \"prismjs\";\n//https://github.com/PrismJS/prism-themes/tree/master/themes\nimport \"prismjs/themes/prism.css\";\n// https://github.com/PrismJS/prism/tree/gh-pages/components\nimport \"prismjs/components/prism-java.js\";\nimport \"prismjs/components/prism-python.js\";\nimport \"prismjs/components/prism-jsx.js\";\n// import \"prismjs/components/prism-cpp.js\";\nimport \"prismjs/components/prism-c.js\";\nimport \"prismjs/components/prism-javascript.min.js\";\nimport \"@toast-ui/editor-plugin-code-syntax-highlight/dist/toastui-editor-plugin-code-syntax-highlight.css\";\nimport codeSyntaxHighlight from \"@toast-ui/editor-plugin-code-syntax-highlight\";\n\nimport {\n  items,\n  toggleFullScreen,\n  previewStyleButton,\n  darkMode\n} from \"./toolbarItems\";\n\nimport widgetRules from \"./widgetRules\";\nimport toolbarItems from \"./toolbarItems\";\n\nconst previewStyle = \"vertical\";\n\nconst umlOptions = {\n  rendererURL: \"https://www.plantuml.com/plantuml/svg/\"\n};\n\nexport default function App() {\n  const editorRef = useRef(null);\n  const [previewStyle, setPreviewStyle] = useState(\"vertical\");\n  const [theme, setTheme] = useState(\"light\");\n  let darkModeOn = false;\n  let previewStyleTab = false;\n\n  const toggleDarkMode = () => {\n    // setTheme(darkModeOn?\"light\":\"dark\");\n    // darkModeOn = !darkModeOn;\n    // console.log(editorRef.current.getRootElement().getElementsByClassName(\"toastui-editor-defaultUI\")[0])\n    let el = document.getElementsByClassName(\"toastui-editor-defaultUI\")[0];\n    if (el.classList.contains(\"toastui-editor-dark\"))\n      el.classList.remove(\"toastui-editor-dark\");\n    else el.classList.add(\"toastui-editor-dark\");\n  };\n\n  const togglePreviewStyle = () => {\n    setPreviewStyle(previewStyleTab ? \"vertical\" : \"tab\");\n    previewStyleTab = !previewStyleTab;\n  };\n  return (\n    <Editor\n      ref={editorRef}\n      initialValue=\"# hello react editor world!\"\n      previewStyle={previewStyle}\n      height=\"400px\"\n      initialEditType=\"markdown\"\n      useCommandShortcut={true}\n      theme={theme}\n      widgetRules={widgetRules}\n      toolbarItems={[\n        ...items,\n        [\n          {\n            el: toggleFullScreen(editorRef),\n            tooltip: \"Toggle Full Screen\"\n          },\n          {\n            el: previewStyleButton(togglePreviewStyle),\n            tooltip: \"Preview Style\"\n          },\n          {\n            el: darkMode(toggleDarkMode),\n            tooltip: \"Preview Style\"\n          }\n        ],\n        [\"scrollSync\"]\n      ]}\n      customHTMLRenderer={{\n        latex(node) {\n          console.log(node);\n        },\n        btex(node) {\n          console.log(node);\n        }\n      }}\n      plugins={[\n        [uml, umlOptions],\n        colorSyntax,\n        chart,\n        tableMergedCell,\n        [codeSyntaxHighlight, { highlighter: Prism }]\n      ]}\n    />\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}